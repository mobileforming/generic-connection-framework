# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby 
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# Update this, if you use features of a newer version
fastlane_version "2.96.1"

require 'open3'

# Pull in MF commonly used lanes
import_from_git(url: 'git@gitlab.mobileforming.com:commons/ios-fastlane.git', branch: 'master', path: 'fastlane/Fastfile')

default_platform :ios

platform :ios do
  before_all do
    cocoapods(
      try_repo_update_on_error: true
    )
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end
  
  # Method to load keys from a separate "keys" file
  def load_keys
      begin
        import("keys")
      rescue => exception
        UI.error("fastlane/keys file not found. To use this Fastfile, copy fastlane/keys.template into fastlane/keys and fill in the values")
        raise exception
      end
  end
  
  ################################################################################  
  # Method to determine a repo name from a URL.
  # Used for pod repo add if the podspec repo hasn't previously been used on a server.
  ################################################################################
  def determineRepoName (repoURL)
    begin
      last = repoURL.split("/").last
      final = last.split(".").last
      tempRepoName = last.chomp("." + final)
      return tempRepoName
    rescue => exception
      puts "ERROR parsing repo name from repo URL"
    end
  end
  
  ################################################################################  
  # Method to get branch name from origin/branchName 
  ################################################################################

  def modifyBranch(gitBranch)
    git_branch = "#{gitBranch}"
    puts "Full branch path is: " + git_branch
    baseBranch = git_branch.reverse.chomp('/nigiro').reverse
  end
  
  ################################################################################
  # Coverage lane - Coverage for module that includes Xcode 9 workaround
  ################################################################################
  desc "Runs Sonar Swift code coverage analysis for modules"
  override_lane :coverageModule do |options|
    # Prior simulator state was causing failures, kill all simulators and clean state before testing
    #sh "killall 'Simulator' 2> /dev/null; xcrun simctl erase all"
    scan(
      clean: true,
      scheme: options[:scheme],
      device: 'iPhone 7',
      configuration: options[:configuration],
      code_coverage: true,
      xcargs: "CLANG_COVERAGE_PROFILE_FILE='Build/Coverage.profdata'",
      derived_data_path: "."
    )
    sh "bash ./coverageprofdata.sh"
    sh "xcrun llvm-cov show -instr-profile=../Build/Coverage.profdata ../Build/Products/#{options[:configuration]}-iphonesimulator/#{options[:scheme]}.framework/#{options[:scheme]} > ../Coverage.report"
  end
  
  ################################################################################
  # Upload podspec - source for internal repo
  ################################################################################
  desc "Lane to upload podspec to internal source podspec repos"
  lane :distributionUploadInternalPods do |options|
    load_keys
    
    # Determine where to push changes back to
    pushBranch = modifyBranch(options[:gitBranch])
  
    # Get version from plist
    version = get_info_plist_value(path: options[:plistPath], key: "CFBundleShortVersionString")
  
    # Replace version in podspec
    text = File.read("../#{options[:podspecFilePath]}")
    newVersion = text.gsub(/^  s.version.*$/, '  s.version      = "' + version + '"')
    File.open("../#{options[:podspecFilePath]}", "w") {|file| file.puts newVersion }
  
    gym(
      scheme: options[:scheme],
      configuration: options[:configuration],
      skip_archive: true,
      skip_package_ipa: true
    )
  
    git_add
    git_commit(path: "*.*", message: "Version bump")
    add_git_tag(tag: version)
    #push_git_tags
    push_to_git_remote(
      local_branch: "HEAD",
      remote_branch: pushBranch,
      tags: true,
      force: false
    )
  
    existingPodRepos = Open3.capture3("pod repo list").to_s
    podspecURLS = options[:podspecRepoURLS].split(",")
    sourceURLS = options[:sourceURLS].split(",")
    for url in podspecURLS
      if !existingPodRepos.include? url
        repoName = determineRepoName(url)
        sh "pod repo add #{repoName} #{url}"
      end
      text = File.read("../#{options[:podspecFilePath]}")
      source = "s.source       = { :git => '" + sourceURLS[podspecURLS.index(url)] + "', :tag => '#{version}' }"
      puts "New source = #{source}"
      newSource = text.gsub(/^.*s.source\ .*$/, "  " + source)
      File.open("../#{options[:podspecFilePath]}", "w") {|file| file.puts newSource }
      sh "pod repo push #{url} ../#{options[:podspecFilePath]}"
    end
  end
  
  ################################################################################
  # Upload podspec - source for client repos
  ################################################################################
  desc "Lane to upload podspec to client source podspec repos"
  lane :distributionUploadClientPods do |options|
    load_keys
  
    # Get version from plist
    version = get_info_plist_value(path: options[:plistPath], key: "CFBundleShortVersionString")
  
    # Replace version in podspec
    text = File.read("../#{options[:podspecFilePath]}")
    newVersion = text.gsub(/^  s.version.*$/, '  s.version      = "' + version + '"')
    File.open("../#{options[:podspecFilePath]}", "w") {|file| file.puts newVersion }
  
    existingPodRepos = Open3.capture3("pod repo list").to_s
    podspecURLS = options[:podspecRepoURLS].split(",")
    sourceURLS = options[:sourceURLS].split(",")
    for url in podspecURLS
      if !existingPodRepos.include? url
        repoName = determineRepoName(url)
        sh "pod repo add #{repoName} #{url}"
      end
      text = File.read("../#{options[:podspecFilePath]}")
      source = "s.source       = { :git => '" + sourceURLS[podspecURLS.index(url)] + "', :tag => '#{version}' }"
      puts "New source = #{source}"
      newSource = text.gsub(/^.*s.source\ .*$/, "  " + source)
      File.open("../#{options[:podspecFilePath]}", "w") {|file| file.puts newSource }
      sh "pod repo push #{url} ../#{options[:podspecFilePath]}"
    end
  end
 
  after_all do |lane|
    # This block is called, only if the executed lane was successful
    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


 

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
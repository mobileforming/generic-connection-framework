# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby 
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# Update this, if you use features of a newer version
fastlane_version "1.105.0"


# Pull in MF commonly used lanes
import_from_git(url: 'git@gitlab.mobileforming.com:commons/ios-fastlane.git', branch: 'master', path: 'fastlane/Fastfile')

default_platform :ios

platform :ios do
  before_all do
    cocoapods
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end
  
  # Method to load keys from a separate "keys" file
  def load_keys
      begin
        import("keys")
      rescue => exception
        UI.error("fastlane/keys file not found. To use this Fastfile, copy fastlane/keys.template into fastlane/keys and fill in the values")
        raise exception
      end
  end
  
  ################################################################################
  # Coverage lane - Coverage for module that includes Xcode 9 workaround
  ################################################################################
  desc "Runs Sonar Swift code coverage analysis for modules"
  override_lane :coverageModule do |options|
    # Prior simulator state was causing failures, kill all simulators and clean state before testing
    #sh "killall 'Simulator' 2> /dev/null; xcrun simctl erase all"
    scan(
      clean: true,
      scheme: options[:scheme],
      device: 'iPhone 7',
      configuration: options[:configuration],
      code_coverage: true,
      xcargs: "CLANG_COVERAGE_PROFILE_FILE='Build/Coverage.profdata'",
      derived_data_path: "."
    )
    sh "bash ./coverageprofdata.sh"
    sh "xcrun llvm-cov show -instr-profile=../Build/Coverage.profdata ../Build/Products/#{options[:configuration]}-iphonesimulator/#{options[:scheme]}.framework/#{options[:scheme]} > ../Coverage.report"
  end
  
  ################################################################################
  # Nexus upload lane - Upload to staging repo in Nexus
  ################################################################################
  desc "Build framework and upload to Nexus"
  lane :artifactUploadNexus do |options|
    load_keys
    version = get_info_plist_value(path: options[:plistPath], key: "CFBundleShortVersionString")
    identifier = ENV["BUNDLE_ID"]
    artifact = identifier.split(".").last
    group = identifier.chomp("." + artifact)
    upload_path="#{options[:framework]}.zip"
    xcodebuild(
      clean: true,
      scheme: options[:scheme],
      configuration: options[:configuration],
      workspace: options[:workspace],
      build: true
    )
    zip(
      path: options[:framework],
      output_path: upload_path
    )
    nexus_upload(
      verbose: true,
      file: upload_path,
      repo_id: "staging",
      repo_group_id: group,
      repo_project_name: artifact,
      repo_project_version: version,
      endpoint: ENV["NEXUS_PATH"],
      username: ENV["NEXUS_USERNAME"],
      password: ENV["NEXUS_PASSWORD"]
    )
  end
 
  after_all do |lane|
    # This block is called, only if the executed lane was successful
    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


 

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
